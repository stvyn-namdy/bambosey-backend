generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  passwordHash   String          @map("password_hash")
  firstName      String          @map("first_name")
  lastName       String          @map("last_name")
  phone          String?
  role           Role            @default(CUSTOMER)
  isActive       Boolean         @default(true) @map("is_active")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  addresses      Address[]
  cart           Cart?
  orders         Order[]
  paymentMethods PaymentMethod[]
  preorders      Preorder[]
  reviews        Review[]
  wishlist       Wishlist[]

  @@map("users")
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  parentId    Int?       @map("parent_id")
  createdAt   DateTime   @default(now()) @map("created_at")
  parent      Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryParent")
  products    Product[]

  @@map("categories")
}

model Product {
  id                Int              @id @default(autoincrement())
  name              String
  description       String?
  basePrice         Decimal          @map("base_price") @db.Decimal(10, 2)
  categoryId        Int?             @map("category_id")
  sku               String?          @unique
  images            String[]
  isActive          Boolean          @default(true) @map("is_active")
  stockStatus       StockStatus      @default(IN_STOCK) @map("stock_status")
  allowPreorder     Boolean          @default(false) @map("allow_preorder")
  preorderPrice     Decimal?         @map("preorder_price") @db.Decimal(10, 2)
  expectedStockDate DateTime?        @map("expected_stock_date")
  preorderLimit     Int?             @map("preorder_limit")
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")
  cartItems         CartItem[]
  orderItems        OrderItem[]
  preorders         Preorder[]
  variants          ProductVariant[]
  category          Category?        @relation(fields: [categoryId], references: [id])
  reviews           Review[]
  wishlist          Wishlist[]

  @@map("products")
}

model Color {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  hexCode         String           @unique @map("hex_code")
  isActive        Boolean          @default(true) @map("is_active")
  productVariants ProductVariant[]

  @@map("colors")
}

model Size {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  sortOrder       Int              @default(0) @map("sort_order")
  isActive        Boolean          @default(true) @map("is_active")
  productVariants ProductVariant[]

  @@map("sizes")
}

model ProductVariant {
  id          Int         @id @default(autoincrement())
  productId   Int         @map("product_id")
  colorId     Int?        @map("color_id")
  sizeId      Int?        @map("size_id")
  sku         String?     @unique
  price       Decimal?    @db.Decimal(10, 2)
  images      String[]
  isActive    Boolean     @default(true) @map("is_active")
  stockStatus StockStatus @default(IN_STOCK) @map("stock_status")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  cartItems   CartItem[]
  inventory   Inventory?
  orderItems  OrderItem[]
  preorders   Preorder[]
  color       Color?      @relation(fields: [colorId], references: [id])
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  size        Size?       @relation(fields: [sizeId], references: [id])

  @@unique([productId, colorId, sizeId])
  @@map("product_variants")
}

model Inventory {
  id                Int            @id @default(autoincrement())
  productVariantId  Int            @unique @map("product_variant_id")
  quantity          Int            @default(0)
  reservedQuantity  Int            @default(0) @map("reserved_quantity")
  lowStockThreshold Int            @default(10) @map("low_stock_threshold")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  productVariant    ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@map("inventory")
}

model Address {
  id             Int         @id @default(autoincrement())
  userId         Int         @map("user_id")
  type           AddressType @default(SHIPPING)
  firstName      String      @map("first_name")
  lastName       String      @map("last_name")
  streetAddress  String      @map("street_address")
  city           String
  state          String
  postalCode     String      @map("postal_code")
  country        String
  isDefault      Boolean     @default(false) @map("is_default")
  createdAt      DateTime    @default(now()) @map("created_at")
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingOrders  Order[]     @relation("BillingAddress")
  shippingOrders Order[]     @relation("ShippingAddress")
  preorders      Preorder[]

  @@map("addresses")
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique @map("user_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@map("cart")
}

model CartItem {
  id               Int             @id @default(autoincrement())
  cartId           Int             @map("cart_id")
  productId        Int             @map("product_id")
  productVariantId Int?            @map("product_variant_id")
  quantity         Int
  price            Decimal         @db.Decimal(10, 2)
  isPreorder       Boolean         @default(false) @map("is_preorder")
  createdAt        DateTime        @default(now()) @map("created_at")
  cart             Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product          Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model Order {
  id                    Int           @id @default(autoincrement())
  userId                Int           @map("user_id")
  orderNumber           String        @unique @map("order_number")
  status                OrderStatus   @default(PENDING)
  totalAmount           Decimal       @map("total_amount") @db.Decimal(10, 2)
  shippingAddressId     Int?          @map("shipping_address_id")
  billingAddressId      Int?          @map("billing_address_id")
  paymentStatus         PaymentStatus @default(PENDING) @map("payment_status")
  paymentMethod         String?       @map("payment_method")
  stripePaymentIntentId String?       @map("stripe_payment_intent_id")
  orderType             OrderType     @default(REGULAR) @map("order_type")
  expectedDeliveryDate  DateTime?     @map("expected_delivery_date")
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")
  items                 OrderItem[]
  billingAddress        Address?      @relation("BillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress       Address?      @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  user                  User          @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id               Int             @id @default(autoincrement())
  orderId          Int             @map("order_id")
  productId        Int             @map("product_id")
  productVariantId Int?            @map("product_variant_id")
  quantity         Int
  price            Decimal         @db.Decimal(10, 2)
  total            Decimal         @db.Decimal(10, 2)
  isPreorder       Boolean         @default(false) @map("is_preorder")
  order            Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product          Product         @relation(fields: [productId], references: [id])
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])

  @@map("order_items")
}

model Preorder {
  id                Int             @id @default(autoincrement())
  userId            Int             @map("user_id")
  productId         Int             @map("product_id")
  productVariantId  Int?            @map("product_variant_id")
  quantity          Int
  price             Decimal         @db.Decimal(10, 2)
  status            PreorderStatus  @default(PENDING)
  shippingAddressId Int?            @map("shipping_address_id")
  expectedDate      DateTime?       @map("expected_date")
  depositPaid       Decimal?        @map("deposit_paid") @db.Decimal(10, 2)
  remainingAmount   Decimal?        @map("remaining_amount") @db.Decimal(10, 2)
  notifyWhenReady   Boolean         @default(true) @map("notify_when_ready")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  product           Product         @relation(fields: [productId], references: [id])
  productVariant    ProductVariant? @relation(fields: [productVariantId], references: [id])
  shippingAddress   Address?        @relation(fields: [shippingAddressId], references: [id])
  user              User            @relation(fields: [userId], references: [id])

  @@map("preorders")
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  userId    Int      @map("user_id")
  rating    Int      @db.SmallInt
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  productId Int      @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist")
}

model PaymentMethod {
  id                    Int      @id @default(autoincrement())
  userId                Int      @map("user_id")
  stripePaymentMethodId String   @map("stripe_payment_method_id")
  cardLastFour          String   @map("card_last_four")
  cardBrand             String   @map("card_brand")
  isDefault             Boolean  @default(false) @map("is_default")
  createdAt             DateTime @default(now()) @map("created_at")
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum AddressType {
  SHIPPING
  BILLING
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum OrderType {
  REGULAR
  PREORDER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIAL
}

enum StockStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  DISCONTINUED
  PREORDER_ONLY
}

enum PreorderStatus {
  PENDING
  CONFIRMED
  READY
  SHIPPED
  DELIVERED
  CANCELLED
  EXPIRED
}
